<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yarhl</name>
    </assembly>
    <members>
        <member name="T:Yarhl.AssemblyUtils">
            <summary>
            Utilities to work with Assemblies.
            </summary>
        </member>
        <member name="M:Yarhl.AssemblyUtils.LoadAssemblies(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load assemblies.
            </summary>
            <param name="paths">List of assemblies to load.</param>
            <returns>The assemblies.</returns>
        </member>
        <member name="T:Yarhl.FileFormat.ConverterMetadata">
            <summary>
            Metadata associated to a IConverter interface.
            </summary>
        </member>
        <member name="M:Yarhl.FileFormat.ConverterMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileFormat.ConverterMetadata" /> class.
            </summary>
        </member>
        <member name="P:Yarhl.FileFormat.ConverterMetadata.Name">
            <summary>
            Gets or sets the full name of the type. Shortcut of Type.FullName.
            </summary>
            <value>The full name of the type.</value>
        </member>
        <member name="P:Yarhl.FileFormat.ConverterMetadata.Type">
            <summary>
            Gets or sets the type of class implementing the converter.
            </summary>
            <value>Type of the converter.</value>
        </member>
        <member name="P:Yarhl.FileFormat.ConverterMetadata.InternalSources">
            <summary>
            Gets or sets a single type or list of types that the converter
            can convert from.
            </summary>
            <value>Single or list of types for conversion.</value>
        </member>
        <member name="P:Yarhl.FileFormat.ConverterMetadata.InternalDestinations">
            <summary>
            Gets or sets a single type or list of types the converter can
            convert to.
            </summary>
            <value>Single or list of types the converter can convert to.</value>
        </member>
        <member name="M:Yarhl.FileFormat.ConverterMetadata.GetSources">
            <summary>
            Gets a list of source types that can convert from.
            </summary>
            <returns>List of source types that can convert from.</returns>
        </member>
        <member name="M:Yarhl.FileFormat.ConverterMetadata.GetDestinations">
            <summary>
            Gets a list of destination types it can convert to.
            </summary>
            <returns>Destination types it can convert to.</returns>
        </member>
        <member name="M:Yarhl.FileFormat.ConverterMetadata.CanConvert(System.Type)">
            <summary>
            Check if the associated converter can convert from a given type.
            It checks applying covariance rules.
            </summary>
            <param name="source">Source type for conversion.</param>
            <returns>If this converter can realize the operation.</returns>
        </member>
        <member name="M:Yarhl.FileFormat.ConverterMetadata.CanConvert(System.Type,System.Type)">
            <summary>
            Check if the associated converter can convert from a given type
            into another. It checks applying covariance and contravariance
            rules.
            </summary>
            <param name="source">Source type for conversion.</param>
            <param name="dest">Destination type for conversion.</param>
            <returns>If this converter can realize the operation.</returns>
        </member>
        <member name="T:Yarhl.FileFormat.ConvertFormat">
            <summary>
            Convert formats with converters.
            </summary>
        </member>
        <member name="M:Yarhl.FileFormat.ConvertFormat.To``1(System.Object)">
            <summary>
            Converts the format to the specified type.
            </summary>
            <returns>The new format.</returns>
            <param name="src">Format to convert.</param>
            <typeparam name="TDst">The destination format type.</typeparam>
        </member>
        <member name="M:Yarhl.FileFormat.ConvertFormat.To(System.Type,System.Object)">
            <summary>
            Converts the format into the specified type.
            </summary>
            <returns>The new format.</returns>
            <param name="dstType">Type of the destination format.</param>
            <param name="src">Format to convert.</param>
        </member>
        <member name="M:Yarhl.FileFormat.ConvertFormat.With(System.Type,System.Object)">
            <summary>
            Converts the format using a converter with the specified type.
            </summary>
            <param name="converterType">Type of the converter.</param>
            <param name="src">Format to convert.</param>
            <returns>The new format.</returns>
        </member>
        <member name="M:Yarhl.FileFormat.ConvertFormat.With``1(System.Object)">
            <summary>
            Converts the format using a converter with the specified type.
            </summary>
            <param name="src">Format to convert.</param>
            <typeparam name="TConv">Type of the converter.</typeparam>
            <returns>The new format.</returns>
        </member>
        <member name="M:Yarhl.FileFormat.ConvertFormat.With``2(``1,System.Object)">
            <summary>
            Converts the format using a converter with the specified type
            and initialized with some parameters.
            </summary>
            <param name="param">Parameters to initialize the converter.</param>
            <param name="src">Format to convert.</param>
            <typeparam name="TConv">Type of the converter.</typeparam>
            <typeparam name="TParam">Type of the parameters.</typeparam>
            <returns>The new format.</returns>
        </member>
        <member name="M:Yarhl.FileFormat.ConvertFormat.With(Yarhl.FileFormat.IConverter,System.Object)">
            <summary>
            Converts the format using the specified converter.
            </summary>
            <returns>The new format.</returns>
            <param name="converter">Converter to use.</param>
            <param name="src">Format to convert.</param>
        </member>
        <member name="T:Yarhl.FileFormat.FormatMetadata">
            <summary>
            Metadata associated to a Format class.
            </summary>
        </member>
        <member name="M:Yarhl.FileFormat.FormatMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileFormat.FormatMetadata" /> class.
            </summary>
        </member>
        <member name="P:Yarhl.FileFormat.FormatMetadata.Name">
            <summary>
            Gets or sets the type full name. Shortcut of Type.FullName.
            </summary>
            <value>The full name of the type.</value>
        </member>
        <member name="P:Yarhl.FileFormat.FormatMetadata.Type">
            <summary>
            Gets or sets the type of the format.
            </summary>
            <value>The type of the format.</value>
        </member>
        <member name="T:Yarhl.FileFormat.ICloneableFormat">
            <summary>
            Cloneable format interface.
            </summary>
        </member>
        <member name="M:Yarhl.FileFormat.ICloneableFormat.DeepClone">
            <summary>
            Deep clones a format into a new object.
            </summary>
            <returns>The cloned format.</returns>
            <remarks>
            <para>A 'deep copy' must create the necessary copies, in the way that
            any change in the original node (or any of it's member hierarchy) won't affect
            the cloned node.</para>
            </remarks>
        </member>
        <member name="T:Yarhl.FileFormat.IConverter">
            <summary>
            Non-generic converter interface.
            </summary>
        </member>
        <member name="T:Yarhl.FileFormat.IConverter`2">
            <summary>
            Format converter interface.
            </summary>
            <typeparam name="TSrc">Source format.</typeparam>
            <typeparam name="TDst">Destination format.</typeparam>
        </member>
        <member name="M:Yarhl.FileFormat.IConverter`2.Convert(`0)">
            <summary>
            Converts the specified source into the given type.
            </summary>
            <returns>The converted source.</returns>
            <param name="source">Source format to convert.</param>
        </member>
        <member name="T:Yarhl.FileFormat.IExportMetadata">
            <summary>
            Base metadata associated to a exported type.
            </summary>
        </member>
        <member name="P:Yarhl.FileFormat.IExportMetadata.Name">
            <summary>
            Gets or sets the name of the extension.
            Usually it's the FullName property of Type.
            </summary>
            <value>Name of the extension.</value>
        </member>
        <member name="P:Yarhl.FileFormat.IExportMetadata.Type">
            <summary>
            Gets or sets the type of the extension.
            </summary>
            <value>The type of the extension.</value>
        </member>
        <member name="T:Yarhl.FileFormat.IFormat">
            <summary>
            File format marker.
            </summary>
        </member>
        <member name="T:Yarhl.FileFormat.IInitializer`1">
            <summary>
            Initialization interface.
            </summary>
            <typeparam name="T">Type of the parameters for the initialize.</typeparam>
        </member>
        <member name="M:Yarhl.FileFormat.IInitializer`1.Initialize(`0)">
            <summary>
            Initialize the instance with the specified parameters.
            </summary>
            <param name="parameters">Parameters for the initialize.</param>
        </member>
        <member name="T:Yarhl.FileSystem.NavigableNode`1">
            <summary>
            Node with navigation features inside a FileSystem.
            </summary>
            <typeparam name="T">The implementation of NavigableNodes.</typeparam>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Yarhl.FileSystem.NavigableNode`1"/> class.
            </summary>
            <param name="name">Node name.</param>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNode`1.Name">
            <summary>
            Gets the node name.
            </summary>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNode`1.Path">
            <summary>
            Gets the path.
            </summary>
            <remarks>
            <para>It includes the names of all the parent nodes and this node.</para>
            </remarks>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNode`1.Parent">
            <summary>
            Gets the parent node.
            </summary>
            <returns>
            The reference to the parent node or null if it doesn't have any parent.
            </returns>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNode`1.Children">
            <summary>
            Gets a read-only list of children nodes.
            </summary>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNode`1.Tags">
            <summary>
            Gets the dictionary of tags.
            </summary>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNode`1.Disposed">
            <summary>
            Gets a value indicating whether this node is disposed.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.Add(`0)">
            <summary>
            Add a node.
            </summary>
            <remarks>
            <para>Updates the parent of the child node to match this instance.
            If the node already contains a child with the same name it will be replaced.
            Otherwise the node is added.</para>
            </remarks>
            <param name="node">Node to add.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a list of nodes.
            </summary>
            <param name="nodes">List of nodes to add.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.Remove(`0)">
            <summary>
            Remove a node.
            </summary>
            <param name="node">Node reference to remove.</param>
            <remarks>
            <para>This method does NOT dispose the removed node.</para>
            </remarks>
            <returns>Whether the node was found and removed successfully.</returns>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.Remove(System.String)">
            <summary>
            Remove a node with the specified name.
            </summary>
            <param name="name">The name of the node to remove.</param>
            <remarks>
            <para>This method <strong>does</strong> dispose the removed node.
            If you don't want to dispose it, search the node and call the
            overload with the node argument.</para>
            </remarks>
            <returns>Whether the node was found and removed successfully.</returns>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.RemoveChildren(System.Boolean)">
            <summary>
            Removes and dispose all the children from the node.
            </summary>
            <param name="dispose">If set to <see langword="true" /> disposes the nodes before remove them.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.FileSystem.Node"/>
            object.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.SortChildren(System.Boolean)">
            <summary>
            Sorts the children nodes using the default comparer.
            </summary>
            <param name="recursive">If set to <see langword="true" /> sorts the children nodes recursively.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.SortChildren(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Sorts the children nodes using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.</param>
            <param name="recursive">If set to <see langword="true" /> sorts the children nodes recursively.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.SortChildren(System.Comparison{`0},System.Boolean)">
            <summary>
            Sorts the children nodes using the specified <see cref="T:System.Comparison`1" />.
            </summary>
            <param name="comparison">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</param>
            <param name="recursive">If set to <see langword="true" /> sorts the children nodes recursively.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the
            <see cref="T:Yarhl.FileSystem.NavigableNode`1"/> object.
            </summary>
            <param name="freeManagedResourcesAlso">If set to
            <see langword="true" /> free managed resources also.</param>
        </member>
        <member name="T:Yarhl.FileSystem.NavigableNodeCollection`1">
            <summary>
            Read-only collection of NavigableNodes.
            </summary>
            <typeparam name="T">The implementation of NavigableNodes.</typeparam>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNodeCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Yarhl.FileSystem.NavigableNodeCollection`1"/> class.
            </summary>
            <param name="list">Original list of nodes.</param>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNodeCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Yarhl.FileSystem.NavigableNodeCollection`1"/>
            with the specified name.
            </summary>
            <param name="name">Node name.</param>
            <returns>The node with the same name or null if not found.</returns>
        </member>
        <member name="T:Yarhl.FileSystem.NavigationMode">
            <summary>
            Navigation mode through a file system.
            </summary>
        </member>
        <member name="F:Yarhl.FileSystem.NavigationMode.BreadthFirst">
            <summary>
            Breadth-First Search.
            Returns first nodes in the same directory.
            </summary>
        </member>
        <member name="F:Yarhl.FileSystem.NavigationMode.DepthFirst">
            <summary>
            Depth-First Search.
            Return first nodes in sub-directories.
            </summary>
        </member>
        <member name="T:Yarhl.FileSystem.Navigator">
            <summary>
            Filesystem navigator.
            Search for nodes and iterate over them.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.Navigator.SearchNode``1(``0,System.String)">
            <summary>
            Search a node by path.
            </summary>
            <param name="rootNode">The root node to start the search.</param>
            <param name="path">Path to search.</param>
            <returns>Node or null if not found.</returns>
            <typeparam name="T">NavigableNode type.</typeparam>
            <remarks>
            <para>If the path starts with the path separator '/', it is
            considered to be a full path. Otherwise, it would be a relative
            path starting with the node in the argument.</para>
            </remarks>
        </member>
        <member name="M:Yarhl.FileSystem.Navigator.IterateNodes``1(``0,Yarhl.FileSystem.NavigationMode)">
            <summary>
            Iterates the nodes recursively.
            </summary>
            <param name="rootNode">The root node to start iterating.</param>
            <param name="mode">The navigation mode.</param>
            <returns>The nodes.</returns>
            <typeparam name="T">NavigableNode type.</typeparam>
        </member>
        <member name="T:Yarhl.FileSystem.Node">
            <summary>
            Node in the FileSystem with an associated format.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.Node.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileSystem.Node"/> class.
            </summary>
            <param name="name">Node name.</param>
        </member>
        <member name="M:Yarhl.FileSystem.Node.#ctor(System.String,Yarhl.FileFormat.IFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileSystem.Node"/> class.
            </summary>
            <param name="name">Node name.</param>
            <param name="initialFormat">Node format.</param>
        </member>
        <member name="M:Yarhl.FileSystem.Node.#ctor(Yarhl.FileSystem.Node)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileSystem.Node"/> class.
            </summary>
            <param name="node">The original node.</param>
            <remarks><para>It makes a copy of the original node.
            The original format is deep copied. See <see cref="T:Yarhl.FileFormat.ICloneableFormat"/> for details.</para>
            </remarks>
            <remarks><para>If the node has children, it must be a <see cref="T:Yarhl.FileSystem.NodeContainerFormat"/> to clone them.
            In other case, the format must implement <see cref="T:Yarhl.FileFormat.ICloneableFormat"/> and clone the children explicitly.
            </para></remarks>
        </member>
        <member name="P:Yarhl.FileSystem.Node.Format">
            <summary>
            Gets the current format of the node.
            </summary>
            <value>The current format.</value>
        </member>
        <member name="P:Yarhl.FileSystem.Node.Stream">
            <summary>
            Gets the node associated DataStream if the format is IBinary.
            </summary>
            <value>
            DataStream if the format is IBinary, null otherwise.
            </value>
        </member>
        <member name="P:Yarhl.FileSystem.Node.IsContainer">
            <summary>
            Gets a value indicating whether the format is a container of nodes.
            </summary>
            <value>
            <see langword="true"/> if the format is a container; otherwise,
            <see langword="false"/>.
            </value>
        </member>
        <member name="M:Yarhl.FileSystem.Node.GetFormatAs``1">
            <summary>
            Gets the format as the specified type.
            </summary>
            <returns>The format casted to the type or null if not possible.</returns>
            <typeparam name="T">The format type.</typeparam>
        </member>
        <member name="M:Yarhl.FileSystem.Node.ChangeFormat(Yarhl.FileFormat.IFormat,System.Boolean)">
            <summary>
            Change the format of the current node.
            </summary>
            <remarks>
            <para>If the previous format was a container, this method will
            remove the children of the node.
            If the new format is a container, this method will add the format
            children to the node.</para>
            <para>If the new format is the same reference as the current format
            the method is a no-op.</para>
            </remarks>
            <param name="newFormat">The new format to assign.</param>
            <param name="disposePreviousFormat">
            If <see langword="true" /> the method will dispose the previous
            format.
            </param>
        </member>
        <member name="M:Yarhl.FileSystem.Node.TransformTo``1">
            <summary>
            Transforms the node format to the specified format.
            </summary>
            <typeparam name="TDst">Format to convert.</typeparam>
            <returns>This node.</returns>
        </member>
        <member name="M:Yarhl.FileSystem.Node.TransformTo(System.Type)">
            <summary>
            Transforms the node format to the specified format.
            </summary>
            <returns>This node.</returns>
            <param name="dst">Format to convert. It must implement IFormat.</param>
        </member>
        <member name="M:Yarhl.FileSystem.Node.TransformWith``1">
            <summary>
            Transform the node format to another format with a given converter.
            </summary>
            <returns>This node.</returns>
            <typeparam name="TConv">The type of the converter to use.</typeparam>
        </member>
        <member name="M:Yarhl.FileSystem.Node.TransformWith``2(``1)">
            <summary>
            Transform the node format to another format with a given converter
            initialized with parameters.
            </summary>
            <returns>This node.</returns>
            <typeparam name="TConv">The type of the converter to use.</typeparam>
            <typeparam name="TParam">The type for initializing the converter.</typeparam>
            <param name="param">Parameters to initialize the converter.</param>
        </member>
        <member name="M:Yarhl.FileSystem.Node.TransformWith(System.Type)">
            <summary>
            Transforms the node format with the specified converter.
            </summary>
            <returns>This node.</returns>
            <param name="converterType">The type of the converter to use.</param>
        </member>
        <member name="M:Yarhl.FileSystem.Node.TransformWith``2(Yarhl.FileFormat.IConverter{``0,``1})">
            <summary>
            Transform the node format to another format using a converter.
            </summary>
            <param name="converter">Convert to use.</param>
            <typeparam name="TSrc">The type of the source format.</typeparam>
            <typeparam name="TDst">The type of the destination format.</typeparam>
            <returns>This node.</returns>
        </member>
        <member name="M:Yarhl.FileSystem.Node.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.FileSystem.Node"/>
            object.
            </summary>
            <param name="freeManagedResourcesAlso">
            If set to <see langword="true"/> free managed resources also.
            </param>
        </member>
        <member name="T:Yarhl.FileSystem.NodeContainerFormat">
            <summary>
            Node container format for unpack / pack files.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.NodeContainerFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileSystem.NodeContainerFormat"/>
            class.
            </summary>
        </member>
        <member name="P:Yarhl.FileSystem.NodeContainerFormat.Root">
            <summary>
            Gets the root node containing the children.
            </summary>
        </member>
        <member name="P:Yarhl.FileSystem.NodeContainerFormat.Disposed">
            <summary>
            Gets a value indicating whether this <see cref="T:Yarhl.FileSystem.NodeContainerFormat"/>
            is disposed.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.NodeContainerFormat.MoveChildrenTo(Yarhl.FileSystem.Node,System.Boolean)">
            <summary>
            Moves the children from this format to a <see cref="T:Yarhl.FileSystem.Node"/>.
            </summary>
            <remarks>
            <para>The node will handle the lifecycle of the children.
            Disposing the format won't dispose the children.
            It will replace nodes with the same name.</para>
            </remarks>
            <param name="newNode">Node that will contain the children.</param>
            <param name="mergeContainers">If set to <see langword="true" /> it will merge container nodes with the same name.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeContainerFormat.DeepClone">
            <inheritdoc />
        </member>
        <member name="M:Yarhl.FileSystem.NodeContainerFormat.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.FileSystem.NodeContainerFormat"/> object.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.NodeContainerFormat.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the
            <see cref="T:Yarhl.FileSystem.NodeContainerFormat"/> object.
            </summary>
            <param name="disposing">
            If set to <see langword="true" /> free managed resources also.
            It happens from Dispose() calls.
            </param>
        </member>
        <member name="T:Yarhl.FileSystem.NodeFactory">
            <summary>
            Node factory.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.CreateContainer(System.String)">
            <summary>
            Creates a new <see cref="T:Yarhl.FileSystem.Node"/> with a new NodeContainer format.
            </summary>
            <returns>The new node.</returns>
            <param name="name">Node name.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.CreateContainersForChild(Yarhl.FileSystem.Node,System.String,Yarhl.FileSystem.Node)">
            <summary>
            Creates the missing parent nodes to contain the child and add it.
            </summary>
            <param name="root">The root node that will contain the nodes.</param>
            <param name="path">
            The path for the child. It doesn't contain the root or child names.</param>
            <param name="child">The child to add to root with the path.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromMemory(System.String)">
            <summary>
            Creates a Node with a new stream from memory.
            </summary>
            <param name="name">The name of the node.</param>
            <returns>The new node.</returns>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromArray(System.String,System.Byte[])">
            <summary>
            Creates a Node with a binary format containing the array.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="data">The data for the binary format.</param>
            <returns>The new node.</returns>
            <exception cref="T:System.ArgumentNullException">The name is null or empty, the data is null.</exception>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromArray(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a Node with a binary format containing a part of the array.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="data">The data for the binary format.</param>
            <param name="offset">The offset to start the data of the node.</param>
            <param name="length">The number of bytes for the node's data.</param>
            <returns>The new node.</returns>
            <exception cref="T:System.ArgumentNullException">The name is null or empty, the data is null.</exception>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromStream(System.String,System.IO.Stream)">
            <summary>
            Creates a Node from a stream.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="stream">The binary stream.</param>
            <remarks>
            <para>It will take over the ownership of the stream
            argument, you should not dispose this stream argument.</para>
            </remarks>
            <returns>The new node.</returns>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromSubstream(System.String,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Creates a Node from a part of a stream.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="source">The source / parent stream.</param>
            <param name="offset">
            The offset in the source stream where the node starts.
            </param>
            <param name="length">The length of the data in the node.</param>
            <remarks>
            <para>This format creates an internal <see cref="T:Yarhl.IO.DataStream" /> from the
            provided stream. It will take over the ownership of the stream
            argument, you should not dispose this argument, unless you are
            providing a <see cref="T:Yarhl.IO.DataStream" /> that we won't take over in case
            you want to create more substreams.</para>
            </remarks>
            <returns>The new node.</returns>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromFile(System.String,Yarhl.IO.FileOpenMode)">
            <summary>
            Creates a Node from a file.
            </summary>
            <returns>The node.</returns>
            <param name="filePath">File path.</param>
            <param name="mode">The mode to open the file.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromFile(System.String,System.String,Yarhl.IO.FileOpenMode)">
            <summary>
            Creates a Node from a file.
            </summary>
            <returns>The node.</returns>
            <param name="filePath">File path.</param>
            <param name="nodeName">Node name.</param>
            <param name="mode">The mode to open the file.</param>
            <remarks>
            <para>Add the tag "FileInfo" with the file info status at the time it's created.</para>
            <para>In the case of Windows Symlinks, it will be the status of the link file, not the target.</para>
            </remarks>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromDirectory(System.String,System.String,Yarhl.IO.FileOpenMode)">
            <summary>
            Creates a Node containing all the files from the directory.
            </summary>
            <returns>The container node.</returns>
            <param name="dirPath">Directory path.</param>
            <param name="filter">Filter for files in directory.</param>
            <param name="mode">The mode to open the files.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromDirectory(System.String,System.String,System.String,System.Boolean,Yarhl.IO.FileOpenMode)">
            <summary>
            Creates a Node containing all the files from the directory.
            </summary>
            <returns>The container node.</returns>
            <param name="dirPath">Directory path.</param>
            <param name="filter">Filter for files in directory.</param>
            <param name="nodeName">Node name.</param>
            <param name="subDirectories">
            If <see langword="true" /> it searchs recursively in subdirectories.
            </param>
            <param name="mode">The mode to open the files.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromDirectory(System.String,System.Func{System.String,System.Boolean},Yarhl.IO.FileOpenMode)">
            <summary>
            Creates a Node containing all the files from the directory.
            </summary>
            <returns>The container node.</returns>
            <param name="dirPath">Directory path.</param>
            <param name="filter">Filter for files in directory.</param>
            <param name="mode">The mode to open the files.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromDirectory(System.String,System.Func{System.String,System.Boolean},System.String,System.Boolean,Yarhl.IO.FileOpenMode)">
            <summary>
            Creates a Node containing all the files from the directory.
            </summary>
            <returns>The container node.</returns>
            <param name="dirPath">Directory path.</param>
            <param name="filter">Filter for files in directory.</param>
            <param name="nodeName">Node name.</param>
            <param name="subDirectories">
            If <see langword="true" /> it searchs recursively in subdirectories.
            </param>
            <param name="mode">The mode to open the files.</param>
        </member>
        <member name="T:Yarhl.FileSystem.NodeSystem">
            <summary>
            Basic settings and configurations for a system of nodes.
            </summary>
        </member>
        <member name="P:Yarhl.FileSystem.NodeSystem.PathSeparator">
            <summary>
            Gets the path separator.
            </summary>
            <value>The path separator.</value>
        </member>
        <member name="T:Yarhl.IO.BinaryFormat">
            <summary>
            Binary format.
            </summary>
        </member>
        <member name="M:Yarhl.IO.BinaryFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.BinaryFormat"/> class.
            Creates a stream in memory.
            </summary>
        </member>
        <member name="M:Yarhl.IO.BinaryFormat.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.BinaryFormat"/> class.
            </summary>
            <param name="stream">
            Stream to wrap as a format. It takes over the ownership of the stream.
            You must not dispose it.
            </param>
        </member>
        <member name="M:Yarhl.IO.BinaryFormat.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.BinaryFormat"/> class.
            </summary>
            <remarks>
            <para>This format creates an internal <see cref="T:Yarhl.IO.DataStream" /> from the
            provided stream. It will take over the ownership of the stream
            argument, you should not dispose this argument, unless you are
            providing a <see cref="T:Yarhl.IO.DataStream" /> that we won't take over in case
            you want to create more substreams.</para>
            </remarks>
            <param name="stream">Binary stream.</param>
            <param name="offset">Offset from the DataStream start.</param>
            <param name="length">Length of the substream.</param>
        </member>
        <member name="P:Yarhl.IO.BinaryFormat.Stream">
            <summary>
            Gets the stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.BinaryFormat.Disposed">
            <summary>
            Gets a value indicating whether this <see cref="T:Yarhl.IO.BinaryFormat"/>
            is disposed.
            </summary>
        </member>
        <member name="M:Yarhl.IO.BinaryFormat.DeepClone">
            <summary>
            Makes a copy of the format stream <strong>into memory</strong>
            and returns a new <see cref="T:Yarhl.IO.BinaryFormat"/> object.
            </summary>
            <remarks><para>The stream is copied into memory, so it is limited to 2GB size.</para></remarks>
            <returns>The cloned <see cref="T:Yarhl.IO.BinaryFormat"/>.</returns>
        </member>
        <member name="M:Yarhl.IO.BinaryFormat.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.IO.BinaryFormat"/> object.
            </summary>
        </member>
        <member name="M:Yarhl.IO.BinaryFormat.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.IO.BinaryFormat"/> object.
            </summary>
            <param name="disposing">
            If set to <see langword="true" /> free managed resources also.
            It happens from Dispose() calls.
            </param>
        </member>
        <member name="T:Yarhl.IO.DataReader">
            <summary>
            Binary DataReader for DataStreams.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataReader"/> class.
            </summary>
            <param name="stream">Stream to read from.</param>
            <remarks>
            <para>By default the endianness is LittleEndian and
            the encoding is UTF-8.</para>
            </remarks>
        </member>
        <member name="P:Yarhl.IO.DataReader.Stream">
            <summary>
            Gets the stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataReader.Endianness">
            <summary>
            Gets or sets the endianness.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataReader.DefaultEncoding">
            <summary>
            Gets or sets the default encoding.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadByte">
            <summary>
            Reads a 8-bit byte number.
            </summary>
            <returns>The next byte.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadSByte">
            <summary>
            Reads a signed 8-bit byte number.
            </summary>
            <returns>The next signed byte.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadUInt16">
            <summary>
            Reads an unsigned 16-bit number.
            </summary>
            <returns>The next 16-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadInt16">
            <summary>
            Reads a signed 16-bit number.
            </summary>
            <returns>The next signed 16-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadInt24">
            <summary>
            Reads a 24-bit number.
            </summary>
            <returns>The next 24-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadUInt32">
            <summary>
            Reads an unsigned 32-bit number.
            </summary>
            <returns>The next unsigned 32-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadInt32">
            <summary>
            Reads a signed 32-bit number.
            </summary>
            <returns>The next signed 32-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadUInt64">
            <summary>
            Reads an unsigned 64-bit number.
            </summary>
            <returns>The next unsigned 64-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadInt64">
            <summary>
            Reads a signed 64-bit number.
            </summary>
            <returns>The next signed 64-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadSingle">
            <summary>
            Reads a 32-bits IEEE 754 single precision floating-point number.
            </summary>
            <returns>The next float number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadDouble">
            <summary>
            Reads a 64-bits IEEE 754 double precision floating-point number.
            </summary>
            <returns>The next double number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadBytes(System.Int32)">
            <summary>
            Reads bytes from the stream.
            </summary>
            <returns>The bytes read.</returns>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadChar(System.Text.Encoding)">
            <summary>
            Reads a char.
            </summary>
            <remarks>
            This method read one code units. A code unit may not represent a full
            grapheme. This method may return corrupted code units and may
            advance a wrong number of bytes if the given number of code units to
            read are not enough to represent a grapheme.
            </remarks>
            <returns>The next char.</returns>
            <param name="encoding">
            Encoding to use or <c>null</c> to use <see cref="P:Yarhl.IO.DataReader.DefaultEncoding" />.
            </param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadChars(System.Int32,System.Text.Encoding)">
            <summary>
            Reads an array of chars.
            </summary>
            <remarks>
            This method reads code units. A code unit may not represent a full
            grapheme. This method may return corrupted code units and may
            advance a wrong number of bytes if the given number of code units to
            read are not enough to represent a grapheme.
            </remarks>
            <returns>The chars (code-units) read.</returns>
            <param name="count">The number of chars (code-units) to read.</param>
            <param name="encoding">
            Encoding to use or <c>null</c> to use <see cref="P:Yarhl.IO.DataReader.DefaultEncoding" />.
            </param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadStringToToken(System.String,System.Text.Encoding)">
            <summary>
            Reads a string until a string token is found.
            </summary>
            <returns>The read string.</returns>
            <param name="token">Token to find.</param>
            <param name="encoding">
            Encoding to use or <c>null</c> to use <see cref="P:Yarhl.IO.DataReader.DefaultEncoding" />.
            </param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadString(System.Text.Encoding)">
            <summary>
            Reads a string that ends with the null terminator.
            </summary>
            <returns>The string.</returns>
            <param name="encoding">Optional encoding to use.</param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string with a constant size.
            </summary>
            <returns>The string.</returns>
            <param name="bytesCount">Size of the string in bytes.</param>
            <param name="encoding">Optional encoding to use.</param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadString(System.Type,System.Text.Encoding)">
            <summary>
            Reads the size with a size field first.
            </summary>
            <returns>The string.</returns>
            <param name="sizeType">Type of the size field.</param>
            <param name="encoding">Optional encoding to use.</param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadByType(System.Type)">
            <summary>
            Reads a field by type.
            </summary>
            <returns>The field.</returns>
            <remarks>Nullable types are not supported.</remarks>
            <param name="type">Type of the field.</param>
        </member>
        <member name="M:Yarhl.IO.DataReader.Read``1">
            <summary>
            Read a field by type.
            </summary>
            <returns>The field.</returns>
            <typeparam name="T">The type of the field.</typeparam>
        </member>
        <member name="M:Yarhl.IO.DataReader.SkipPadding(System.Int32)">
            <summary>
            Skip bytes to pad the position in the stream.
            </summary>
            <param name="padding">Padding value.</param>
        </member>
        <member name="T:Yarhl.IO.DataStream">
            <summary>
            Virtual <see cref="T:System.IO.Stream" /> with substream capabilities and read/write
            abstraction layer.
            </summary>
            <remarks>
            The type is thread-safe at the level of the substream. For instance, it
            is safe to use several DataStream over the same base stream in parallel.
            The type is not thread-safe for its method. For instance, it is NOT safe
            to use the same DataStream in different threads at the same time.
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataStream"/> class.
            A new stream is created in memory.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataStream" /> class.
            </summary>
            <remarks>
            <p>The dispose ownership is transferred to this stream.</p>
            </remarks>
            <param name="stream">Base stream.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataStream" /> class
            from a substream transferring the ownership of the life-cycle. In the
            case the stream is another <see cref="T:Yarhl.IO.DataStream" /> the ownership
            is inherited.
            </summary>
            <param name="stream">Base stream.</param>
            <param name="offset">Offset from the base stream.</param>
            <param name="length">Length of this substream.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.#ctor(System.IO.Stream,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataStream" /> class.
            </summary>
            <param name="stream">Base stream.</param>
            <param name="offset">Offset from the base stream.</param>
            <param name="length">Length of this substream.</param>
            <param name="transferOwnership">
            Transfer the ownsership of the stream argument to this class so
            it can dispose it.
            </param>
        </member>
        <member name="P:Yarhl.IO.DataStream.ActiveStreams">
            <summary>
            Gets the number of streams in use.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.Disposed">
            <summary>
            Gets a value indicating whether this <see cref="T:Yarhl.IO.DataStream"/> is disposed.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.Offset">
            <summary>
            Gets the offset from the BaseStream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.Position">
            <summary>
            Gets or sets the position from the start of this stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.Length">
            <summary>
            Gets the length of this stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.ParentDataStream">
            <summary>
            Gets the parent DataStream only if this stream was initialized from
            a DataStream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.BaseStream">
            <summary>
            Gets the base stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.EndOfStream">
            <summary>
            Gets a value indicating whether the position is at end of the stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.AbsolutePosition">
            <summary>
            Gets the position from the base stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.CanTimeout">
            <summary>
            Gets a value indicating whether the current stream support timeouts.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.ReadTimeout">
            <summary>
            Gets or sets an invalid value as read time is not supported.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.WriteTimeout">
            <summary>
            Gets or sets an invalid value as write time is not supported.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.InternalInfo">
            <summary>
            Gets the internal stream information for testing pourpose only.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The new length value.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data
            to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.Seek(System.Int64,Yarhl.IO.SeekMode)">
            <summary>
            Move the position of the Stream.
            </summary>
            <param name="shift">Distance to move position.</param>
            <param name="mode">Mode to move position.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Move the position of the stream.
            </summary>
            <param name="offset">Distance to move position.</param>
            <param name="origin">Mode to move position.</param>
            <returns>The new position of the stream.</returns>
        </member>
        <member name="M:Yarhl.IO.DataStream.PushToPosition(System.Int64,Yarhl.IO.SeekMode)">
            <summary>
            Push the current position into a stack and move to a new one.
            </summary>
            <param name="shift">Distance to move position.</param>
            <param name="mode">Mode to move position.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.PushToPosition(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Push the current position into a stack and move to a new one.
            </summary>
            <param name="shift">Distance to move position.</param>
            <param name="mode">Mode to move position.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.PushCurrentPosition">
            <summary>
            Push the current position into a stack.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.PopPosition">
            <summary>
            Pop the last position from the stack and move to it.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.RunInPosition(System.Action,System.Int64,Yarhl.IO.SeekMode)">
            <summary>
            Run a method in a specific position.
            This command will move into the position, run the method and return
            to the current position.
            </summary>
            <param name="action">Action to run.</param>
            <param name="position">Position to move.</param>
            <param name="mode">Mode to move position.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.RunInPosition(System.Action,System.Int64,System.IO.SeekOrigin)">
            <summary>
            Run a method in a specific position.
            This command will move into the position, run the method and return
            to the current position.
            </summary>
            <param name="action">Action to run.</param>
            <param name="position">Position to move.</param>
            <param name="mode">Mode to move position.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the
            stream by one byte, or returns -1 if at the end of the stream.
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:Yarhl.IO.DataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the
            position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than
            the number of bytes requested if that many bytes are not currently
            available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">Buffer to copy data.</param>
            <param name="offset">Index to start copying in buffer.</param>
            <param name="count">Maximum number of bytes to read.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.ReadFormat``1">
            <summary>
            Reads a format from this stream.
            </summary>
            <returns>The format read.</returns>
            <typeparam name="T">The type of the format to read.</typeparam>
        </member>
        <member name="M:Yarhl.IO.DataStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte.
            </summary>
            <param name="value">Byte value.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the a portion of the buffer to the stream.
            </summary>
            <param name="buffer">Buffer to write.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Bytes to write.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.WriteTo(System.String)">
            <summary>
            Writes the complete stream into a file.
            </summary>
            <param name="fileOut">Output file path.</param>
            <remarks>
            It preserves the current position and creates any required directory.
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataStream.WriteTo(System.IO.Stream)">
            <summary>
            Writes the complete stream into another stream preserving the current position.
            </summary>
            <param name="stream">The stream to write.</param>
            <remarks>
            This method is similar to <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" />.
            The difference is that it copies always from the position 0 of the
            current stream, and it preserves the current position afterwards.
            It writes into the current position of the destination stream.
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataStream.WriteSegmentTo(System.Int64,System.String)">
            <summary>
            Writes a segment of the stream into a file from a defined position to the end.
            </summary>
            <param name="start">Starting position to read from the current stream.</param>
            <param name="fileOut">Output file path.</param>
            <remarks>
            It preserves the current position and creates any required directory.
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataStream.WriteSegmentTo(System.Int64,System.IO.Stream)">
            <summary>
            Writes a segment of the stream into another stream from a defined position to the end.
            </summary>
            <param name="start">Starting position to read from the current stream.</param>
            <param name="stream">Output stream.</param>
            <remarks>
            It preserves the current position and writes to the current position
            of the destination stream.
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataStream.WriteSegmentTo(System.Int64,System.Int64,System.String)">
            <summary>
            Writes a segment of the stream into a file.
            </summary>
            <param name="start">Starting position to read from the current stream.</param>
            <param name="length">Length of the segment to read.</param>
            <param name="fileOut">Output file path.</param>
            <remarks>
            It preserves the current position and creates any required directory.
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataStream.WriteSegmentTo(System.Int64,System.Int64,System.IO.Stream)">
            <summary>
            Writes a segment of the stream into another stream.
            </summary>
            <param name="start">Starting position to read from the current stream.</param>
            <param name="length">Length of the segment to read.</param>
            <param name="stream">Output stream.</param>
            <remarks>
            It preserves the current position and writes to the current position
            of the destination stream.
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataStream.Compare(System.IO.Stream)">
            <summary>
            Compare the content of the stream with another one.
            </summary>
            <returns>The result of the comparison.</returns>
            <param name="otherStream">Stream to compare with.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.IO.DataStream"/>
            object.
            </summary>
            <param name="disposing">If set to
            <see langword="true" /> free managed resources also.</param>
        </member>
        <member name="T:Yarhl.IO.DataStream.StreamInfo">
            <summary>
            Information of the stream for the DataStream class.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.StreamInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataStream.StreamInfo"/> class.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.StreamInfo.NumInstances">
            <summary>
            Gets the number of DataStream instances for the base stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.DataStream.StreamInfo.LockObj">
            <summary>
            Gets the lock object for the base stream operations.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.StreamInfo.IncreaseInstances">
            <summary>
            Increase the number of instances using the base stream.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.StreamInfo.DecreaseInstances">
            <summary>
            Decrease the number of instances using the base stream.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.StreamInfo.DecreaseInstancesAndRun(System.Action{Yarhl.IO.DataStream.StreamInfo})">
            <summary>
            Decrease the number of instances and run the action.
            </summary>
            <param name="action">The action to run.</param>
        </member>
        <member name="T:Yarhl.IO.DataStreamFactory">
            <summary>
            Factory of DataStream.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStreamFactory.FromStream(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:Yarhl.IO.DataStream"/> from a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream to use as a base.</param>
            <remarks>
            <p>The dispose ownership is transferred to the new DataStream.</p>
            </remarks>
            <returns>A new <see cref="T:Yarhl.IO.DataStream"/>.</returns>
        </member>
        <member name="M:Yarhl.IO.DataStreamFactory.FromStream(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Creates a new <see cref="T:Yarhl.IO.DataStream"/> from a section of a
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            <p>The life-management of the stream is transferred to the
            <see cref="T:Yarhl.IO.DataStream"/>. This means that disposing the new
            <see cref="T:Yarhl.IO.DataStream"/> will potentially dispose the underlying
            stream.</p>
            <p>Check <see cref="M:Yarhl.IO.DataStreamFactory.FromStreamKeepingOwnership(System.IO.Stream,System.Int64,System.Int64)" /> if you don't
            want this behavior.</p>
            </remarks>
            <param name="stream">The stream to use as a base.</param>
            <param name="offset">Offset of the base stream.</param>
            <param name="length">Length of the new substream.</param>
            <returns>A new <see cref="T:Yarhl.IO.DataStream"/>.</returns>
        </member>
        <member name="M:Yarhl.IO.DataStreamFactory.FromStreamKeepingOwnership(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Creates a new <see cref="T:Yarhl.IO.DataStream"/> from a section of a
            <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            <p>The dispose ownership is not transferred to the new
            <see cref="T:Yarhl.IO.DataStream" />. Instead, the caller is still responsible
            to dispose according the stream argument.</p>
            </remarks>
            <param name="stream">The stream to use as a base.</param>
            <param name="offset">Offset of the base stream.</param>
            <param name="length">Length of the new substream.</param>
            <returns>A new <see cref="T:Yarhl.IO.DataStream"/>.</returns>
        </member>
        <member name="M:Yarhl.IO.DataStreamFactory.FromMemory">
            <summary>
            Creates a new <see cref="T:Yarhl.IO.DataStream"/> in memory.
            </summary>
            <returns>A new <see cref="T:Yarhl.IO.DataStream"/>.</returns>
        </member>
        <member name="M:Yarhl.IO.DataStreamFactory.FromArray(System.Byte[])">
            <summary>
            Creates a new <see cref="T:Yarhl.IO.DataStream"/> from an array of data.
            </summary>
            <param name="data">The array of data to use in the stream.</param>
            <returns>A new <see cref="T:Yarhl.IO.DataStream"/>.</returns>
        </member>
        <member name="M:Yarhl.IO.DataStreamFactory.FromArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Yarhl.IO.DataStream"/> from an array of data.
            </summary>
            <param name="data">The array of data to use in the stream.</param>
            <param name="offset">Offset in the array of data.</param>
            <param name="length">Length of the new stream.</param>
            <returns>A new <see cref="T:Yarhl.IO.DataStream"/>.</returns>
        </member>
        <member name="M:Yarhl.IO.DataStreamFactory.FromFile(System.String,Yarhl.IO.FileOpenMode)">
            <summary>
            Creates a new <see cref="T:Yarhl.IO.DataStream"/> from a file.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="mode">The mode to open the file.</param>
            <returns>A new <see cref="T:Yarhl.IO.DataStream"/>.</returns>
        </member>
        <member name="M:Yarhl.IO.DataStreamFactory.FromFile(System.String,Yarhl.IO.FileOpenMode,System.Int64,System.Int64)">
            <summary>
            Creates a new <see cref="T:Yarhl.IO.DataStream"/> from a section of a file.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="mode">The mode to open the file.</param>
            <param name="offset">Offset from the start of the file.</param>
            <param name="length">Length of the new stream.</param>
            <returns>A new <see cref="T:Yarhl.IO.DataStream"/>.</returns>
        </member>
        <member name="T:Yarhl.IO.DataWriter">
            <summary>
            Binary writer for DataStreams.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataWriter"/> class.
            </summary>
            <param name="stream">Stream to write to.</param>
            <remarks>
            <para>By default the endianess is LittleEndian and
            the encoding is UTF-8.</para>
            </remarks>
        </member>
        <member name="P:Yarhl.IO.DataWriter.Stream">
            <summary>
            Gets the stream.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:Yarhl.IO.DataWriter.Endianness">
            <summary>
            Gets or sets the endianness.
            </summary>
            <value>The endianness.</value>
        </member>
        <member name="P:Yarhl.IO.DataWriter.DefaultEncoding">
            <summary>
            Gets or sets the default encoding.
            </summary>
            <value>The default encoding.</value>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Byte)">
            <summary>
            Write the specified 8-bits byte value.
            </summary>
            <param name="val">Byte value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.SByte)">
            <summary>
            Write the specified 8-bits signed byte value.
            </summary>
            <param name="val">Signed byte value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Int16)">
            <summary>
            Write the specified 16-bits signed value.
            </summary>
            <param name="val">16-bits signed value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.UInt16)">
            <summary>
            Write the specified 16-bits unsigned value.
            </summary>
            <param name="val">16-bits unsigned value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Int32)">
            <summary>
            Write the specified 32-bits signed value.
            </summary>
            <param name="val">32-bits signed value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.UInt32)">
            <summary>
            Write the specified 32-bits unsigned value.
            </summary>
            <param name="val">32-bits unsigned value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Int64)">
            <summary>
            Write the specified 64-bits signed value.
            </summary>
            <param name="val">64-bits signed value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.UInt64)">
            <summary>
            Write the specified 64-bits unsigned value.
            </summary>
            <param name="val">64-bits unsigned value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Single)">
            <summary>
            Write the specified 32-bits IEEE 754 single precision
            floating point value.
            </summary>
            <param name="val">Single precision floating point value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Double)">
            <summary>
            Write the specified 64-bits IEEE 754 double precision
            floating point value.
            </summary>
            <param name="val">Double precision floating point value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Byte[])">
            <summary>
            Write the specified byte buffer.
            </summary>
            <param name="buffer">Byte buffer.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Char,System.Text.Encoding)">
            <summary>
            Write the specified char using a text encoding.
            </summary>
            <param name="ch">Char to write.</param>
            <param name="encoding">Optional text encoding to use.</param>
            <remarks>
            <para>If the encoding is null, it will use the default encoding.</para>
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Char[],System.Text.Encoding)">
            <summary>
            Write the specified chars using a text encoding.
            </summary>
            <param name="chars">Char array to write.</param>
            <param name="encoding">Optional text encoding to use.</param>
            <remarks>
            <para>If the encoding is null, it will use the default encoding.</para>
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            Write a text string.
            </summary>
            <param name="text">Text string to write.</param>
            <param name="nullTerminator">
            If set to <see langword="true" /> add null terminator.
            </param>
            <param name="encoding">Text encoding to use.</param>
            <param name="maxSize">Maximum size of the encoded string in bytes.</param>
            <remarks>
            <para>If the encoding is null, it will use the default encoding.</para>
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.String,System.Int32,System.Boolean,System.Text.Encoding)">
            <summary>
            Write a text string with a fixed size.
            </summary>
            <param name="text">Text string to write.</param>
            <param name="fixedSize">Fixed size of the encoded string in bytes.</param>
            <param name="nullTerminator">
            If set to <see langword="true" /> add null terminator.
            </param>
            <param name="encoding">Text encoding to use.</param>
            <remarks>
            <para>If the encoding is null, it will use the default encoding.</para>
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.String,System.Type,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            Write a text string and its size.
            </summary>
            <param name="text">Text string to write.</param>
            <param name="sizeType">Type of the string size to write.</param>
            <param name="nullTerminator">
            If set to <see langword="true" /> add null terminator.
            </param>
            <param name="encoding">Text encoding to use.</param>
            <param name="maxSize">Maximum size of the encoded string in bytes.</param>
            <remarks>
            <para>If the encoding is null, it will use the default encoding.</para>
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.String,System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Write a text string using a custom terminator.
            </summary>
            <param name="text">Text string to write.</param>
            <param name="terminator">
            Token to add as terminator.
            <remarks>If null, then no token will be added.</remarks>
            </param>
            <param name="encoding">Text encoding to use.</param>
            <param name="maxSize">Maximum size of the encoded string in bytes.</param>
            <remarks>
            <para>If the encoding is null, it will use the default encoding.</para>
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.String,System.Int32,System.String,System.Text.Encoding)">
            <summary>
            Write a text string with a fixed size and a custom terminator.
            </summary>
            <param name="text">Text string to write.</param>
            <param name="fixedSize">Fixed size of the encoded string in bytes.</param>
            <param name="terminator">
            Token to add as terminator.
            <remarks>If null, then no token will be added.</remarks>
            </param>
            <param name="encoding">Text encoding to use.</param>
            <remarks>
            <para>If the encoding is null, it will use the default encoding.</para>
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.String,System.Type,System.String,System.Text.Encoding,System.Int32)">
            <summary>
            Write a text string and its size.
            </summary>
            <param name="text">Text string to write.</param>
            <param name="sizeType">Type of the string size to write.</param>
            <param name="terminator">
            Token to add as terminator.
            <remarks>If null, then no token will be added.</remarks>
            </param>
            <param name="encoding">Text encoding to use.</param>
            <param name="maxSize">Maximum size of the encoded string in bytes.</param>
            <remarks>
            <para>If the encoding is null, it will use the default encoding.</para>
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.WriteOfType(System.Type,System.Object)">
            <summary>
            Write the specified value converting to any supported type.
            </summary>
            <param name="type">Type of the value.</param>
            <param name="val">Value to write.</param>
            <remarks>
            <para>The supported types are: long, ulong, int, uint, short,
            ushort, byte, sbyte, char and string.</para>
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.WriteOfType``1(``0)">
            <summary>
            Write the specified value forcing the type in the generic.
            </summary>
            <param name="val">Value to write.</param>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Yarhl.IO.DataWriter.WriteTimes(System.Byte,System.Int64)">
            <summary>
            Writes the same byte the specified number of times.
            </summary>
            <param name="val">Value to write.</param>
            <param name="times">Number of times to write the byte.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.WriteUntilLength(System.Byte,System.Int64)">
            <summary>
            Writes the same byte until the given stream length is reached.
            </summary>
            <param name="val">Value to repeat.</param>
            <param name="length">Stream length to reach.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.WritePadding(System.Byte,System.Int32)">
            <summary>
            Write the same byte to pad the stream.
            </summary>
            <param name="val">Value to repeat.</param>
            <param name="padding">Padding value.</param>
        </member>
        <member name="T:Yarhl.IO.EndiannessMode">
            <summary>
            Endianness mode.
            </summary>
        </member>
        <member name="F:Yarhl.IO.EndiannessMode.LittleEndian">
            <summary>
            Little endian.
            </summary>
        </member>
        <member name="F:Yarhl.IO.EndiannessMode.BigEndian">
            <summary>
            Big endian.
            </summary>
        </member>
        <member name="T:Yarhl.IO.FileOpenMode">
            <summary>
            Mode to open files.
            </summary>
        </member>
        <member name="F:Yarhl.IO.FileOpenMode.Read">
            <summary>
            Open the file for reading.
            If the file doesn't exist it will throw a FileNotFound exception.
            Requires reading permissions.
            </summary>
        </member>
        <member name="F:Yarhl.IO.FileOpenMode.Write">
            <summary>
            Open a file for writing.
            If the file doesn't exist it will be created.
            If the file exists it will be truncated and start writing from the beginning.
            Requires writing permissions.
            </summary>
        </member>
        <member name="F:Yarhl.IO.FileOpenMode.ReadWrite">
            <summary>
            Open a file for reading and/or writing.
            If the file doesn't exist it wll be created.
            If the file exists it will start writing from the beginning but not truncated.
            Requires reading and writing permissions.
            </summary>
        </member>
        <member name="F:Yarhl.IO.FileOpenMode.Append">
            <summary>
            Open a file for appending data at the end.
            If the file doesn't exist it will throw an exception.
            Requires writing permissions.
            </summary>
        </member>
        <member name="T:Yarhl.IO.FileOpenModeExtensions">
            <summary>
            Extensions for the FileOpenMode enumeration.
            </summary>
        </member>
        <member name="M:Yarhl.IO.FileOpenModeExtensions.ToFileMode(Yarhl.IO.FileOpenMode)">
            <summary>
            Get the equivalent <see cref="T:System.IO.FileMode"/>.
            </summary>
            <returns>The file mode.</returns>
            <param name="openMode">File open mode.</param>
        </member>
        <member name="M:Yarhl.IO.FileOpenModeExtensions.ToFileAccess(Yarhl.IO.FileOpenMode)">
            <summary>
            Get the equivalent <see cref="T:System.IO.FileAccess"/>.
            </summary>
            <returns>The file access.</returns>
            <param name="openMode">File open mode.</param>
        </member>
        <member name="T:Yarhl.IO.IBinary">
            <summary>
            Binary format.
            </summary>
        </member>
        <member name="P:Yarhl.IO.IBinary.Stream">
            <summary>
            Gets the stream.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="T:Yarhl.IO.NumericExtension">
            <summary>
            Extension methods for numeric types.
            </summary>
        </member>
        <member name="M:Yarhl.IO.NumericExtension.Pad(System.Int16,System.Int32)">
            <summary>
            Pad the specified address.
            </summary>
            <returns>The address padded.</returns>
            <param name="address">Address to pad.</param>
            <param name="padding">Padding target.</param>
        </member>
        <member name="M:Yarhl.IO.NumericExtension.Pad(System.UInt16,System.Int32)">
            <summary>
            Pad the specified address.
            </summary>
            <returns>The address padded.</returns>
            <param name="address">Address to pad.</param>
            <param name="padding">Padding target.</param>
        </member>
        <member name="M:Yarhl.IO.NumericExtension.Pad(System.Int32,System.Int32)">
            <summary>
            Pad the specified address.
            </summary>
            <returns>The address padded.</returns>
            <param name="address">Address to pad.</param>
            <param name="padding">Padding target.</param>
        </member>
        <member name="M:Yarhl.IO.NumericExtension.Pad(System.UInt32,System.Int32)">
            <summary>
            Pad the specified address.
            </summary>
            <returns>The address padded.</returns>
            <param name="address">Address to pad.</param>
            <param name="padding">Padding target.</param>
        </member>
        <member name="M:Yarhl.IO.NumericExtension.Pad(System.Int64,System.Int64)">
            <summary>
            Pad the specified address.
            </summary>
            <returns>The address padded.</returns>
            <param name="address">Address to pad.</param>
            <param name="padding">Padding target.</param>
        </member>
        <member name="M:Yarhl.IO.NumericExtension.Pad(System.UInt64,System.UInt64)">
            <summary>
            Pad the specified address.
            </summary>
            <returns>The address padded.</returns>
            <param name="address">Address to pad.</param>
            <param name="padding">Padding target.</param>
        </member>
        <member name="T:Yarhl.IO.SeekMode">
            <summary>
            Seek mode for DataStream.
            </summary>
        </member>
        <member name="F:Yarhl.IO.SeekMode.Start">
            <summary>
            Position from the origin of the DataStream.
            </summary>
        </member>
        <member name="F:Yarhl.IO.SeekMode.Current">
            <summary>
            Position from the current position.
            </summary>
        </member>
        <member name="F:Yarhl.IO.SeekMode.End">
            <summary>
            Position going back from the end of the DataStream.
            </summary>
        </member>
        <member name="T:Yarhl.IO.Serialization.Attributes.BinaryBooleanAttribute">
            <summary>
            Define how to read and write a boolean value.
            <remarks>Default type is <see cref="T:System.Int32"/></remarks>
            </summary>
        </member>
        <member name="M:Yarhl.IO.Serialization.Attributes.BinaryBooleanAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.Serialization.Attributes.BinaryBooleanAttribute"/> class.
            </summary>
        </member>
        <member name="P:Yarhl.IO.Serialization.Attributes.BinaryBooleanAttribute.ReadAs">
            <summary>
            Gets or sets the equivalent type for reading.
            </summary>
        </member>
        <member name="P:Yarhl.IO.Serialization.Attributes.BinaryBooleanAttribute.WriteAs">
            <summary>
            Gets or sets the equivalent type for writing.
            </summary>
        </member>
        <member name="P:Yarhl.IO.Serialization.Attributes.BinaryBooleanAttribute.TrueValue">
            <summary>
            Gets or sets the value equals to true.
            </summary>
        </member>
        <member name="P:Yarhl.IO.Serialization.Attributes.BinaryBooleanAttribute.FalseValue">
            <summary>
            Gets or sets the value equals to false.
            </summary>
        </member>
        <member name="T:Yarhl.IO.Serialization.Attributes.BinaryEnumAttribute">
            <summary>
            Define how to read and write a Enum value.
            <remarks>Default type is <see cref="T:System.Int32"/></remarks>
            </summary>
        </member>
        <member name="M:Yarhl.IO.Serialization.Attributes.BinaryEnumAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.Serialization.Attributes.BinaryEnumAttribute"/> class.
            </summary>
        </member>
        <member name="P:Yarhl.IO.Serialization.Attributes.BinaryEnumAttribute.ReadAs">
            <summary>
            Gets or sets the equivalent type for reading.
            </summary>
        </member>
        <member name="P:Yarhl.IO.Serialization.Attributes.BinaryEnumAttribute.WriteAs">
            <summary>
            Gets or sets the equivalent type for writing.
            </summary>
        </member>
        <member name="T:Yarhl.IO.Serialization.Attributes.BinaryForceEndiannessAttribute">
            <summary>
            Set to force the endianness in automatic serialization.
            </summary>
        </member>
        <member name="M:Yarhl.IO.Serialization.Attributes.BinaryForceEndiannessAttribute.#ctor(Yarhl.IO.EndiannessMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.Serialization.Attributes.BinaryForceEndiannessAttribute"/> class.
            </summary>
            <param name="mode">Endianness mode for the property.</param>
        </member>
        <member name="P:Yarhl.IO.Serialization.Attributes.BinaryForceEndiannessAttribute.Mode">
            <summary>
            Gets the endianness mode.
            </summary>
        </member>
        <member name="T:Yarhl.IO.Serialization.Attributes.BinaryIgnoreAttribute">
            <summary>
            Set to ignore the property when serializing.
            </summary>
        </member>
        <member name="T:Yarhl.IO.Serialization.Attributes.BinaryInt24Attribute">
            <summary>
            Property is an Int24 value.
            </summary>
        </member>
        <member name="T:Yarhl.IO.Serialization.Attributes.BinaryStringAttribute">
            <summary>
            Define how to read and write a string value.
            </summary>
        </member>
        <member name="M:Yarhl.IO.Serialization.Attributes.BinaryStringAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.Serialization.Attributes.BinaryStringAttribute"/> class.
            </summary>
        </member>
        <member name="P:Yarhl.IO.Serialization.Attributes.BinaryStringAttribute.CodePage">
            <summary>
            Gets or sets the string code page.
            <remarks>Set to -1 to use the reader/writer encoding.</remarks>
            </summary>
        </member>
        <member name="P:Yarhl.IO.Serialization.Attributes.BinaryStringAttribute.Terminator">
            <summary>
            Gets or sets the string terminator.
            </summary>
        </member>
        <member name="P:Yarhl.IO.Serialization.Attributes.BinaryStringAttribute.FixedSize">
            <summary>
            Gets or sets the fixed size (in bytes) of the string.
            <remarks>Set to -1 if the string is length variable.</remarks>
            </summary>
        </member>
        <member name="P:Yarhl.IO.Serialization.Attributes.BinaryStringAttribute.MaxSize">
            <summary>
            Gets or sets the max size (in bytes) of the string.
            <remarks>Set to -1 if the string has no max size.</remarks>
            </summary>
        </member>
        <member name="P:Yarhl.IO.Serialization.Attributes.BinaryStringAttribute.SizeType">
            <summary>
            Gets or sets the size value type.
            <remarks>Set to null if string doesn't have the length serialized.</remarks>
            </summary>
        </member>
        <member name="T:Yarhl.IO.Serialization.Attributes.SerializableAttribute">
            <summary>
            Set to enable automatic serialization.
            </summary>
        </member>
        <member name="T:Yarhl.IO.StreamFormat.LazyFileStream">
            <summary>
            Open file for reading or writing on the first operation (lazily).
            </summary>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.LazyFileStream.#ctor(System.String,Yarhl.IO.FileOpenMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.StreamFormat.LazyFileStream"/> class.
            </summary>
            <param name="path">Path to the file.</param>
            <param name="mode">Mode to open the file.</param>
        </member>
        <member name="P:Yarhl.IO.StreamFormat.LazyFileStream.Position">
            <inheritdoc/>
        </member>
        <member name="P:Yarhl.IO.StreamFormat.LazyFileStream.Length">
            <summary>
            Gets the length of this stream.
            </summary>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.LazyFileStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The new length of the stream.</param>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.LazyFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the stream to the buffer.
            </summary>
            <returns>The number of bytes read.</returns>
            <param name="buffer">Buffer to copy data.</param>
            <param name="offset">Index to start copying in buffer.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.LazyFileStream.ReadByte">
            <summary>
            Reads the next byte.
            </summary>
            <returns>The next byte.</returns>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.LazyFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the a portion of the buffer to the stream.
            </summary>
            <param name="buffer">Buffer to write.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Bytes to write.</param>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.LazyFileStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte.
            </summary>
            <param name="value">Byte value.</param>
        </member>
        <member name="T:Yarhl.IO.StreamFormat.RecyclableMemoryStream">
            <summary>
            In-memory stream with a pool of buffers.
            </summary>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.RecyclableMemoryStream.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Yarhl.IO.StreamFormat.RecyclableMemoryStream"/> class.
            </summary>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.RecyclableMemoryStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The new length of the stream.</param>
        </member>
        <member name="T:Yarhl.IO.StreamFormat.StreamWrapper">
            <summary>
            Wrapper over a streams to override easily specific methods and use the
            base implementation for the rest.
            </summary>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.StreamWrapper.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.StreamFormat.StreamWrapper" /> class.
            </summary>
            <param name="stream">The stream to wrap.</param>
        </member>
        <member name="P:Yarhl.IO.StreamFormat.StreamWrapper.BaseStream">
            <summary>
            Gets or sets the base stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.StreamFormat.StreamWrapper.Position">
            <summary>
            Gets or sets the position from the start of this stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.StreamFormat.StreamWrapper.Length">
            <summary>
            Gets the length of this stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.StreamFormat.StreamWrapper.Disposed">
            <summary>
            Gets a value indicating whether this stream has been disposed.
            </summary>
        </member>
        <member name="P:Yarhl.IO.StreamFormat.StreamWrapper.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Yarhl.IO.StreamFormat.StreamWrapper.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Yarhl.IO.StreamFormat.StreamWrapper.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Yarhl.IO.StreamFormat.StreamWrapper.CanTimeout">
            <summary>
            Gets a value indicating whether the current stream supports timeouts.
            </summary>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.StreamWrapper.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream.
            </summary>
            <param name="value">The new length of the stream.</param>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.StreamWrapper.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data
            to be written to the underlying device.
            </summary>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.StreamWrapper.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the stream to the buffer.
            </summary>
            <returns>The number of bytes read.</returns>
            <param name="buffer">Buffer to copy data.</param>
            <param name="offset">Index to start copying in buffer.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.StreamWrapper.ReadByte">
            <summary>
            Reads the next byte.
            </summary>
            <returns>The next byte.</returns>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.StreamWrapper.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the a portion of the buffer to the stream.
            </summary>
            <param name="buffer">Buffer to write.</param>
            <param name="offset">Index in the buffer.</param>
            <param name="count">Bytes to write.</param>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.StreamWrapper.WriteByte(System.Byte)">
            <summary>
            Writes a byte.
            </summary>
            <param name="value">Byte value.</param>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.StreamWrapper.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Move the position of the stream.
            </summary>
            <param name="offset">Distance to move position.</param>
            <param name="origin">Mode to move position.</param>
            <returns>The new position of the stream.</returns>
        </member>
        <member name="M:Yarhl.IO.StreamFormat.StreamWrapper.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.IO.StreamFormat.StreamWrapper"/>
            object.
            </summary>
            <param name="disposing">If set to
            <see langword="true" /> free managed resources also.</param>
        </member>
        <member name="T:Yarhl.IO.TextDataReader">
            <summary>
            Text reader for <see cref="P:Yarhl.IO.TextDataReader.Stream" />.
            </summary>
        </member>
        <member name="M:Yarhl.IO.TextDataReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.TextDataReader"/> class.
            </summary>
            <param name="stream">Stream to read from.</param>
            <remarks><para>The default encoding is UTF-8.</para></remarks>
        </member>
        <member name="M:Yarhl.IO.TextDataReader.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.TextDataReader"/> class.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="encoding">Encoding to use.</param>
        </member>
        <member name="M:Yarhl.IO.TextDataReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.TextDataReader"/> class.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="encoding">Encoding to use.</param>
        </member>
        <member name="P:Yarhl.IO.TextDataReader.Stream">
            <summary>
            Gets the stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.TextDataReader.Encoding">
            <summary>
            Gets the encoding.
            </summary>
        </member>
        <member name="P:Yarhl.IO.TextDataReader.NewLine">
            <summary>
            Gets or sets the new line and set to false AutoNewLine.
            </summary>
            <value>The new line.</value>
            <remarks><para>The default value is OS-dependant.</para></remarks>
        </member>
        <member name="P:Yarhl.IO.TextDataReader.AutoNewLine">
            <summary>
            Gets or sets a value indicating whether reads any kind of
            NewLine format (\r\n or \n). If true, this ignore the
            NewLine field.
            </summary>
            <returns>If true, it will treat new lines any matching of \r\n or
            \n. Otherwise false.
            </returns>
        </member>
        <member name="M:Yarhl.IO.TextDataReader.Read">
            <summary>
            Read a char from the stream.
            </summary>
            <returns>The read char.</returns>
        </member>
        <member name="M:Yarhl.IO.TextDataReader.Read(System.Int32)">
            <summary>
            Read the specified number of chars.
            </summary>
            <returns>The read chars.</returns>
            <param name="count">Chars to read.</param>
        </member>
        <member name="M:Yarhl.IO.TextDataReader.ReadToToken(System.String)">
            <summary>
            Reads a string until a string / token is found.
            </summary>
            <param name="token">Token to find.</param>
            <returns>The read string or null.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            If the stream position is at the end.
            </exception>
        </member>
        <member name="M:Yarhl.IO.TextDataReader.ReadLine">
            <summary>
            Reads a line.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:Yarhl.IO.TextDataReader.ReadToEnd">
            <summary>
            Reads to the end.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Yarhl.IO.TextDataReader.Peek">
            <summary>
            Read the next char without changing the position.
            </summary>
            <returns>The next char.</returns>
        </member>
        <member name="M:Yarhl.IO.TextDataReader.Peek(System.Int32)">
            <summary>
            Read the next count of chars without changing the position.
            </summary>
            <returns>The next chars.</returns>
            <param name="count">Number of chars to read.</param>
        </member>
        <member name="M:Yarhl.IO.TextDataReader.PeekToToken(System.String)">
            <summary>
            Read until a string / token is found without changing the position.
            </summary>
            <returns>The next chars.</returns>
            <param name="token">Token to find.</param>
        </member>
        <member name="M:Yarhl.IO.TextDataReader.PeekLine">
            <summary>
            Read the next line without changing the position.
            </summary>
            <returns>The next line.</returns>
        </member>
        <member name="T:Yarhl.IO.TextDataWriter">
            <summary>
            Text writer for <see cref="P:Yarhl.IO.TextDataWriter.Stream" />.
            </summary>
        </member>
        <member name="M:Yarhl.IO.TextDataWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.TextDataWriter"/> class.
            </summary>
            <param name="stream">Stream to write to.</param>
            <remarks><para>The default encoding is UTF-8.</para></remarks>
        </member>
        <member name="M:Yarhl.IO.TextDataWriter.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.TextDataWriter"/> class.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="encoding">Encoding to use.</param>
        </member>
        <member name="M:Yarhl.IO.TextDataWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.TextDataWriter"/> class.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="encoding">Encoding to use.</param>
        </member>
        <member name="P:Yarhl.IO.TextDataWriter.Stream">
            <summary>
            Gets the stream.
            </summary>
        </member>
        <member name="P:Yarhl.IO.TextDataWriter.Encoding">
            <summary>
            Gets the encoding.
            </summary>
        </member>
        <member name="P:Yarhl.IO.TextDataWriter.NewLine">
            <summary>
            Gets or sets the new line character.
            </summary>
            <value>The new line character.</value>
            <remarks><para>The default value is \n, the Unix new line.</para></remarks>
        </member>
        <member name="P:Yarhl.IO.TextDataWriter.AutoPreamble">
            <summary>
            Gets or sets a value indicating whether write automatically
            the encoding preamble.
            </summary>
            <value>
            True to write the preamble if the stream is empty, otherwise false.
            </value>
        </member>
        <member name="M:Yarhl.IO.TextDataWriter.Write(System.Char)">
            <summary>
            Write the specified char.
            </summary>
            <param name="ch">Char to write.</param>
        </member>
        <member name="M:Yarhl.IO.TextDataWriter.Write(System.Char[])">
            <summary>
            Write the specified chars.
            </summary>
            <param name="chars">Chars to write.</param>
        </member>
        <member name="M:Yarhl.IO.TextDataWriter.Write(System.String)">
            <summary>
            Write the specified text without including a new line.
            </summary>
            <param name="text">Text to write.</param>
        </member>
        <member name="M:Yarhl.IO.TextDataWriter.Write(System.String,System.Object[])">
            <summary>
            Write the specified text with format.
            </summary>
            <param name="format">Format for the text.</param>
            <param name="args">Arguments for the format.</param>
        </member>
        <member name="M:Yarhl.IO.TextDataWriter.WriteLine">
            <summary>
            Writes a new line.
            </summary>
        </member>
        <member name="M:Yarhl.IO.TextDataWriter.WriteLine(System.String)">
            <summary>
            Writes the specified text and add a new line.
            </summary>
            <param name="text">Text to write.</param>
        </member>
        <member name="M:Yarhl.IO.TextDataWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the specified text with format.
            </summary>
            <param name="format">Format for the text.</param>
            <param name="args">Arguments of the format.</param>
        </member>
        <member name="M:Yarhl.IO.TextDataWriter.WritePreamble">
            <summary>
            Write the encoding preamble.
            </summary>
        </member>
        <member name="T:Yarhl.PluginManager">
            <summary>
            Plugin manager.
            </summary>
            <remarks>
            <para>Plugin assemblies are loaded from the directory with the Yarhl
            assembly and the 'Plugins' subfolder with its children.</para>
            </remarks>
        </member>
        <member name="M:Yarhl.PluginManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.PluginManager"/> class.
            </summary>
        </member>
        <member name="P:Yarhl.PluginManager.PluginDirectory">
            <summary>
            Gets the name of the plugins directory.
            </summary>
        </member>
        <member name="P:Yarhl.PluginManager.Instance">
            <summary>
            Gets the plugin manager instance.
            </summary>
            <remarks><para>It initializes the manager if needed.</para></remarks>
        </member>
        <member name="M:Yarhl.PluginManager.FindExtensions``1">
            <summary>
            Finds all the extensions from the given base type.
            </summary>
            <returns>The extensions.</returns>
            <typeparam name="T">Type of the extension point.</typeparam>
        </member>
        <member name="M:Yarhl.PluginManager.FindExtensions(System.Type)">
            <summary>
            Finds all the extensions from the given base type.
            </summary>
            <returns>The extensions.</returns>
            <param name="extension">Type of the extension point.</param>
        </member>
        <member name="M:Yarhl.PluginManager.FindLazyExtensions``1">
            <summary>
            Finds all the extensions from the given base type and return their
            lazy type for initialization.
            </summary>
            <typeparam name="T">Type of the extension point.</typeparam>
            <returns>The lazy extensions.</returns>
        </member>
        <member name="M:Yarhl.PluginManager.FindLazyExtensions(System.Type)">
            <summary>
            Finds all the extensions from the given base type and returns
            a factory to initialize the type.
            </summary>
            <param name="extension">Type of the extension point.</param>
            <returns>The extension factory.</returns>
        </member>
        <member name="M:Yarhl.PluginManager.FindLazyExtensions``2">
            <summary>
            Finds all the extensions from the given base type and returns
            a factory to initialize the type and its associated metadata.
            </summary>
            <typeparam name="T">Type of the extension point.</typeparam>
            <typeparam name="TMetadata">Type of the metadata.</typeparam>
            <returns>The extension factory.</returns>
        </member>
        <member name="M:Yarhl.PluginManager.GetFormats">
            <summary>
            Get a list of format extensions.
            </summary>
            <returns>Enumerable of lazy formats with metadata.</returns>
        </member>
        <member name="M:Yarhl.PluginManager.GetConverters">
            <summary>
            Get a list of converter extensions.
            </summary>
            <returns>Enumerable of lazy converters with metadata.</returns>
        </member>
    </members>
</doc>
