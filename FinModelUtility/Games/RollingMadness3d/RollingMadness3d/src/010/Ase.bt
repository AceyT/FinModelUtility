//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

const uint COUNT_COLOR = 0xffffff;
const uint IMAGE_COLOR = 0xff0000;

const uint VERTEX_COLOR = 0x00ff00;
const uint UVDATA_COLOR = 0x0000ff;
const uint TRIANGLE_COLOR = 0xff00ff;
const uint UNK4_COLOR = 0x00ffff;

LittleEndian();

typedef struct {
  char openQuote;
  
  do {
    char fileName;
  } while (fileName != '"');
} String;

uint imgCount0 <bgcolor=COUNT_COLOR>;
String imgs0[imgCount0] <optimize=false,bgcolor=IMAGE_COLOR>;

uint imgCount1 <bgcolor=COUNT_COLOR>;
String imgs1[imgCount1] <optimize=false,bgcolor=IMAGE_COLOR>;

uint unk0;
uint unkId0;

typedef struct {
  float position[3];
  float normal[3];
} Vertex;

uint vertexCount <bgcolor=COUNT_COLOR>;
Vertex vertices[vertexCount] <bgcolor=VERTEX_COLOR>;

typedef struct {
  float uv[2];
  float unk0;
  float unk1;
  float lightmapUv[2];
} UvData;

uint uvDataCount <bgcolor=COUNT_COLOR>;
UvData uvDatas[uvDataCount] <bgcolor=UVDATA_COLOR>;

typedef struct {
  uint unk0;
  uint unk1;
  uint unk2;
  uint unk3;
  uint unk4;
  uint unk5;
  uint unk6;
} Triangle;

uint triangleCount <bgcolor=COUNT_COLOR>;
Triangle triangles[triangleCount] <bgcolor=TRIANGLE_COLOR>;

typedef struct {
  uint unk0;
  
  typedef struct {
    float unk0;
  } Unk4a;

  ubyte unk4aCount;
  byte unk4aSomethings[3]; 
   
  Unk4a unk4aValues[unk4aCount];

} Unk4;

uint unk4Count <bgcolor=UNK4_COLOR>;
Unk4 unk4Values[1] <optimize=false,bgcolor=UNK4_COLOR>;

// ...



//uint someCount;
//uint someValues[someCount];