//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();

local uint i, ii;


typedef struct {
  uint pointersOffset;
  uint maybeVersion;
  uint unk1;
  uint skeletonId; // Matches a value from the associated RCB file
  uint unk2[5];

  uint animationHeaderCount;
  uint animationHeaderOffsetTableOffset;

  uint animationDataCount;
  uint animationDataOffsetTableOffset;

  uint textCount;
  uint textOffset;
} FileHeader;

FileHeader fileHeader;


FSeek(fileHeader.pointersOffset);
local uint pointerCount = (FileSize() - fileHeader.pointersOffset) >> 2;
uint pointers[pointerCount];





typedef struct {
  uint ptr;

  local uint tmp = FTell();
  FSeek(ptr);

  uint nameOffset;
  uint unkOffset;

  FSeek(nameOffset);
  string name;

  FSeek(tmp);
} AnimationHeader;

FSeek(fileHeader.animationHeaderOffsetTableOffset);
AnimationHeader animationHeaders[fileHeader.animationHeaderCount];


typedef struct {
  uint ptr;


  local uint tmp = FTell();
  FSeek(ptr);


  uint someId; // Looks like a hash, matches something at the bottom of RCB files
  uint unk1[9];

  uint someCount;
  uint someOffset;


  typedef struct {
    ushort maybePadding;
    ushort maybeOffsetToData;
    uint commandOffset;
    uint someFlags;
    uint paramsOffset;
    
    FSeek(commandOffset);
    string command;
  } SomeData;

  typedef struct {
    uint someEnum;
    uint someValue;
  } Params;


  for(ii = 0; ii < someCount; ii++) {
    FSeek(someOffset + 16 * ii);
    SomeData someData;

    FSeek(someData.paramsOffset);
    Params params;
  }


  FSeek(tmp);
} AnimationData;



FSeek(fileHeader.animationDataOffsetTableOffset);
AnimationData animationDatas[fileHeader.animationDataCount];