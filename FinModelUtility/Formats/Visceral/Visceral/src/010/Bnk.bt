//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();

local int C_POINTER = 0x888888;
local int C_ANIMATION_HEADER = 0x00ffff;
local int C_ANIMATION_DATA = 0xffff00;
local int C_EVENT_DATA = 0x0000ff;

local uint i, ii;


typedef struct {
  uint pointersOffset <bgcolor=C_POINTER>;
  uint maybeVersion;
  uint unk1;
  uint skeletonId; // Matches a value from the associated RCB file
  uint unk2[5];

  uint animationHeaderCount;
  uint animationHeaderOffsetTableOffset <bgcolor=C_POINTER>;

  uint animationDataCount;
  uint animationDataOffsetTableOffset <bgcolor=C_POINTER>;

  uint textCount;
  uint textOffset <bgcolor=C_POINTER>;
} FileHeader;

FileHeader fileHeader;


FSeek(fileHeader.pointersOffset);
local uint pointerCount = (FileSize() - fileHeader.pointersOffset) >> 2;
uint pointers[pointerCount];





typedef struct {
  uint ptr;

  local uint tmp = FTell();
  FSeek(ptr);

  uint nameOffset <bgcolor=C_POINTER>;

  typedef struct {
    uint ptr;

    local uint tmp = FTell();
    FSeek(ptr);

    enum <byte> BoneType {
      ROOT = 0x2,
      PARENT = 0x5,
      ANIMATED = 0x16,
    } type;

    byte childCount;
    byte maybeId;
    byte unk1;

    uint someOffset <bgcolor=C_POINTER>;
    {
      local uint tmp2 = FTell();
      FSeek(someOffset);

      switch (type) {
        case PARENT: {
          uint unk3;
          float unk4;
          float unk5;
          uint unk6;

          break;
        }
        case ANIMATED: {
          uint unk7;
          float unk8;
          float unk9;

          break;
        }
      }

      FSeek(tmp2);
    }

    uint maybePadding;
    
    if (childCount > 0) {
      struct MaybeBone children[childCount] <optimize=false>;
    }

    if (type == ANIMATED) {
      uint pointerToAnimationData;
      
      FSeek(pointerToAnimationData);
      uint animationData <bgcolor=cRed>;
    }

    FSeek(tmp);
  } MaybeBone;

  MaybeBone root;

  FSeek(nameOffset);
  string name;

  FSeek(tmp);
} AnimationHeader <bgcolor=C_ANIMATION_HEADER>;

FSeek(fileHeader.animationHeaderOffsetTableOffset);
AnimationHeader animationHeaders[fileHeader.animationHeaderCount] <optimize=false>;


typedef struct {
  uint ptr;


  local uint tmp = FTell();
  FSeek(ptr);


  uint someId; // Looks like a hash, might be for some kind of name?
  uint maybeVersion;
  uint unk1;
  uint unk2;

  uint unk3;
  // Matches something at the bottom of the RCB file, which seems to point to
  // the number of bones that will be stored in this animation as well as the 
  // bits choosing which bones will be active (i.e. FF or F7)
  uint boneMapId; 
  uint unk4;
  uint unk5;

  uint unk6;
  uint unk7;
  uint someCount;
  uint someOffset <bgcolor=C_POINTER>;


  typedef struct {
    ushort maybePadding;
    ushort maybeOffsetToData;
    uint commandOffset <bgcolor=C_POINTER>;
    uint someFlags;
    uint paramsOffset <bgcolor=C_POINTER>;
    
    FSeek(commandOffset);
    string command;
  } SomeData <bgcolor=C_EVENT_DATA>;

  typedef struct {
    uint someEnum;
    uint someValue;
  } Params <bgcolor=C_EVENT_DATA>;


  for(ii = 0; ii < someCount; ii++) {
    FSeek(someOffset + 16 * ii);
    SomeData someData;

    FSeek(someData.paramsOffset);
    Params params;
  }


  FSeek(tmp);
} AnimationData;



FSeek(fileHeader.animationDataOffsetTableOffset);
AnimationData animationDatas[fileHeader.animationDataCount] <optimize=false, bgcolor=C_ANIMATION_DATA>;